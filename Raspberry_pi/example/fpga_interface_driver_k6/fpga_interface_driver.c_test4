/*
 * FPGA Interface Driver for modern Linux Kernels (6.x+)
 *
 * v5: Resolved all compiler and linker warnings for a clean build.
 *
 * Key Changes:
 * - Replaced gpiod_get() with the gpio_request_one() and gpio_to_desc()
 * combination. This is the correct and warning-free method for acquiring
 * GPIOs by number in modern kernels without a device tree.
 * - Added function prototypes to resolve all '-Wmissing-prototypes' warnings.
 * - Created a dedicated cleanup function to resolve the 'section mismatch'
 * linker warning, ensuring safer error handling in the init path.
 */
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/delay.h>
#include <linux/gpio.h>          // For gpio_request_one(), gpio_free()
#include <linux/gpio/consumer.h> // For gpiod_* functions and descriptors

/* 제어 신호 인덱스 정의 */
#define CTRL_nWE    0
#define CTRL_nOE    1
#define CTRL_nCS    2

/* 함수 프로토타입 선언 */
static int __init iom_fpga_itf_init(void);
static void __exit iom_fpga_itf_exit(void);
ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value);
unsigned char iom_fpga_itf_read(unsigned int addr);
static void iom_fpga_itf_cleanup_gpios(void);

/* GPIO 핀 번호 정의 */
static const int address_gpios[] = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 };
static const int data_gpios[] = { 2, 3, 4, 5, 6, 7, 8, 9 };
static const int control_gpios[] = { 22, 23, 25 }; // nWE, nOE, nCS 순서

/* GPIO 디스크립터 저장 변수 */
static struct gpio_desc *address_descs[ARRAY_SIZE(address_gpios)] = { NULL };
static struct gpio_desc *data_descs[ARRAY_SIZE(data_gpios)] = { NULL };
static struct gpio_desc *control_descs[ARRAY_SIZE(control_gpios)] = { NULL };

ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value)
{
    int i;
    pr_info("FPGA WRITE: address = 0x%x, data = 0x%x \n", addr, value);

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        gpiod_set_value(address_descs[i], (addr >> (i + 1)) & 0x1);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_set_value(data_descs[i], (value >> i) & 0x1);
    }

    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nWE], 0); udelay(5);
    gpiod_set_value(control_descs[CTRL_nWE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    return 1;
}
EXPORT_SYMBOL(iom_fpga_itf_write);

unsigned char iom_fpga_itf_read(unsigned int addr)
{
    unsigned char value = 0;
    int i;

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        gpiod_set_value(address_descs[i], (addr >> (i + 1)) & 0x1);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_direction_input(data_descs[i]);
    }

    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nOE], 0); udelay(1);

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        value |= (gpiod_get_value(data_descs[i]) << i);
    }

    gpiod_set_value(control_descs[CTRL_nOE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_direction_output(data_descs[i], 0);
    }

    pr_info("FPGA READ: address = 0x%x, data = 0x%x \n", addr, value);
    return value;
}
EXPORT_SYMBOL(iom_fpga_itf_read);


static void iom_fpga_itf_cleanup_gpios(void)
{
    int i;
    pr_info("Cleaning up GPIOs...\n");
    // 할당된 모든 GPIO 리소스를 해제합니다.
    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        if (address_descs[i]) gpio_free(address_gpios[i]);
    }
    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        if (data_descs[i]) gpio_free(data_gpios[i]);
    }
    for (i = 0; i < ARRAY_SIZE(control_gpios); i++) {
        if (control_descs[i]) gpio_free(control_gpios[i]);
    }
}


static void __exit iom_fpga_itf_exit(void)
{
    pr_info("exit module: %s\n", __func__);
    iom_fpga_itf_cleanup_gpios();
}

static int __init iom_fpga_itf_init(void)
{
    int i;
    int ret = 0;
    pr_info("init module: %s\n", __func__);

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        ret = gpio_request_one(address_gpios[i], GPIOF_OUT_INIT_LOW, "fpga_addr");
        if (ret) {
            pr_err("Failed to request address_gpio %d: %d\n", address_gpios[i], ret);
            goto fail;
        }
        address_descs[i] = gpio_to_desc(address_gpios[i]);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        ret = gpio_request_one(data_gpios[i], GPIOF_OUT_INIT_LOW, "fpga_data");
        if (ret) {
            pr_err("Failed to request data_gpio %d: %d\n", data_gpios[i], ret);
            goto fail;
        }
        data_descs[i] = gpio_to_desc(data_gpios[i]);
    }

    for (i = 0; i < ARRAY_SIZE(control_gpios); i++) {
        ret = gpio_request_one(control_gpios[i], GPIOF_OUT_INIT_HIGH, "fpga_ctrl");
        if (ret) {
            pr_err("Failed to request control_gpio %d: %d\n", control_gpios[i], ret);
            goto fail;
        }
        control_descs[i] = gpio_to_desc(control_gpios[i]);
    }

    pr_info("FPGA interface GPIOs initialized successfully.\n");
    return 0;

fail:
    // 초기화 실패 시, 지금까지 할당된 모든 리소스를 해제
    pr_err("Initialization failed, cleaning up...\n");
    iom_fpga_itf_cleanup_gpios();
    return ret;
}

module_init(iom_fpga_itf_init);
module_exit(iom_fpga_itf_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("FPGA Interface Driver (v5 - Warning Free)");

