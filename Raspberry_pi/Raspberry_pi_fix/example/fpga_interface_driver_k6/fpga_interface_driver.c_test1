/*
 * FPGA Interface Driver for Linux Kernel 6.x
 *
 * This driver is updated to use the modern GPIO descriptor-based interface,
 * making it compatible with Raspberry Pi OS based on Linux Kernel 6.x.
 *
 * Key Changes:
 * - Replaced legacy <linux/gpio.h> with <linux/gpio/consumer.h>.
 * - Uses gpio_desc descriptors instead of integer-based GPIO numbers for manipulation.
 * - Switched from gpio_request/free to gpiod_get/put.
 * - Switched from gpio_set/get_value to gpiod_set/get_value.
 * - Added explicit GPIO direction control for data pins during read operations.
 */
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/delay.h>
#include <linux/gpio/consumer.h> // 새로운 GPIO 헤더

/* 제어 신호 인덱스 정의 */
#define CTRL_nWE    0
#define CTRL_nOE    1
#define CTRL_nCS    2

/* GPIO 핀 번호 정의 */
static const int a0_gpio = 10;
static const int iom_fpga_address_gpios[] = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 };
static const int iom_fpga_data_gpios[] = { 2, 3, 4, 5, 6, 7, 8, 9 };
static const int iom_fpga_control_gpios[] = { 22, 23, 25 }; // nWE, nOE, nCS 순서

/* GPIO 디스크립터를 저장할 전역 변수 */
static struct gpio_desc *a0_desc;
static struct gpio_desc *iom_fpga_address_descs[ARRAY_SIZE(iom_fpga_address_gpios)];
static struct gpio_desc *iom_fpga_data_descs[ARRAY_SIZE(iom_fpga_data_gpios)];
static struct gpio_desc *iom_fpga_control_descs[ARRAY_SIZE(iom_fpga_control_gpios)];

/**
 * @brief FPGA에 데이터를 씁니다.
 * @param addr 대상 주소
 * @param value 쓸 데이터
 * @return 성공 시 1
 */
ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value)
{
    int i;

    pr_info("FPGA WRITE: address = 0x%x, data = 0x%x \n", addr, value);

    // 주소 버스 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_gpios); i++) {
        gpiod_set_value(iom_fpga_address_descs[i], (addr >> i) & 0x1);
    }

    // 데이터 버스 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_gpios); i++) {
        gpiod_set_value(iom_fpga_data_descs[i], (value >> i) & 0x1);
    }

    // 쓰기 신호(nCS, nWE) 제어
    gpiod_set_value(iom_fpga_control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(iom_fpga_control_descs[CTRL_nWE], 0); udelay(5);
    gpiod_set_value(iom_fpga_control_descs[CTRL_nWE], 1);
    gpiod_set_value(iom_fpga_control_descs[CTRL_nCS], 1);

    return 1;
}
EXPORT_SYMBOL(iom_fpga_itf_write);

/**
 * @brief FPGA에서 데이터를 읽습니다.
 * @param addr 대상 주소
 * @return 읽은 데이터
 */
unsigned char iom_fpga_itf_read(unsigned int addr)
{
    unsigned char value = 0;
    int i;

    // 주소 버스 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_gpios); i++) {
        gpiod_set_value(iom_fpga_address_descs[i], (addr >> i) & 0x1);
    }

    // 데이터 GPIO 핀들을 입력으로 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_gpios); i++) {
        gpiod_direction_input(iom_fpga_data_descs[i]);
    }

    // 읽기 신호(nCS, nOE) 제어
    gpiod_set_value(iom_fpga_control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(iom_fpga_control_descs[CTRL_nOE], 0); udelay(1);

    // 데이터 버스에서 값 읽기
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_gpios); i++) {
        value |= (gpiod_get_value(iom_fpga_data_descs[i]) << i);
    }

    // 제어 신호 비활성화
    gpiod_set_value(iom_fpga_control_descs[CTRL_nOE], 1);
    gpiod_set_value(iom_fpga_control_descs[CTRL_nCS], 1);

    // 데이터 GPIO 핀들을 다시 출력으로 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_gpios); i++) {
        gpiod_direction_output(iom_fpga_data_descs[i], 0);
    }

    pr_info("FPGA READ: address = 0x%x, data = 0x%x \n", addr, value);

    return value;
}
EXPORT_SYMBOL(iom_fpga_itf_read);

/**
 * @brief 모듈 종료 시 호출될 함수. 할당된 모든 GPIO 디스크립터를 해제합니다.
 */
void __exit iom_fpga_itf_exit(void)
{
    int i;
    pr_info("exit module: %s\n", __func__);

    // 할당된 모든 GPIO 해제
    if (a0_desc) gpiod_put(a0_desc);

    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_descs); i++) {
        if (iom_fpga_address_descs[i]) gpiod_put(iom_fpga_address_descs[i]);
    }
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_descs); i++) {
        if (iom_fpga_data_descs[i]) gpiod_put(iom_fpga_data_descs[i]);
    }
    for (i = 0; i < ARRAY_SIZE(iom_fpga_control_descs); i++) {
        if (iom_fpga_control_descs[i]) gpiod_put(iom_fpga_control_descs[i]);
    }
}

/**
 * @brief 모듈 초기화 함수. 모든 GPIO를 요청하고 초기화합니다.
 * @return 성공 시 0, 실패 시 음수 에러 코드
 */
int __init iom_fpga_itf_init(void)
{
    int i, ret = 0;
    pr_info("init module: %s\n", __func__);

    // GPIO 요청 및 방향/초기값 설정
    a0_desc = gpiod_get(NULL, a0_gpio, GPIOD_OUT_LOW);
    if (IS_ERR(a0_desc)) { ret = PTR_ERR(a0_desc); goto fail; }

    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_gpios); i++) {
        iom_fpga_address_descs[i] = gpiod_get(NULL, iom_fpga_address_gpios[i], GPIOD_OUT_LOW);
        if (IS_ERR(iom_fpga_address_descs[i])) { ret = PTR_ERR(iom_fpga_address_descs[i]); goto fail; }
    }

    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_gpios); i++) {
        iom_fpga_data_descs[i] = gpiod_get(NULL, iom_fpga_data_gpios[i], GPIOD_OUT_LOW);
        if (IS_ERR(iom_fpga_data_descs[i])) { ret = PTR_ERR(iom_fpga_data_descs[i]); goto fail; }
    }

    for (i = 0; i < ARRAY_SIZE(iom_fpga_control_gpios); i++) {
        iom_fpga_control_descs[i] = gpiod_get(NULL, iom_fpga_control_gpios[i], GPIOD_OUT_HIGH);
        if (IS_ERR(iom_fpga_control_descs[i])) { ret = PTR_ERR(iom_fpga_control_descs[i]); goto fail; }
    }

    pr_info("FPGA interface GPIOs requested successfully.\n");
    return 0;

fail:
    pr_err("Failed to get GPIOs, error %d\n", ret);
    iom_fpga_itf_exit(); // 실패 시 할당된 GPIO들을 모두 해제
    return ret;
}

module_init(iom_fpga_itf_init);
module_exit(iom_fpga_itf_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("FPGA Interface Driver for Kernel 6.x");


