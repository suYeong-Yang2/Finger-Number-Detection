/*
 * FPGA Interface Driver for Linux Kernel 6.x
 *
 * This driver is updated to use the modern GPIO descriptor-based interface,
 * combined with the legacy GPIO array request mechanism for simplicity and stability.
 *
 * Key Changes:
 * - Re-introduced <linux/gpio.h> for legacy array request functions.
 * - Uses 'struct gpio' arrays to define GPIOs for easy management.
 * - Uses gpio_request_array() and gpio_free_array() for resource allocation.
 * - Uses gpio_to_desc() to convert legacy GPIO numbers to modern descriptors.
 * - All GPIO manipulation is done via descriptors (gpiod_* functions).
 * - Corrected descriptor variable names used in read/write functions.
 */
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/delay.h>
#include <linux/gpio/consumer.h> // Modern GPIO interface
#include <linux/gpio.h>          // For legacy gpio_request_array and struct gpio

/* 제어 신호 인덱스 정의 */
#define CTRL_nWE    0
#define CTRL_nOE    1
#define CTRL_nCS    2

/* 레거시 `struct gpio`를 사용한 GPIO 정의 */
static struct gpio iom_fpga_a0_pin[] = {
    { 10, GPIOF_OUT_INIT_LOW, "fpga_a0" },
};
static struct gpio iom_fpga_address_pins[] = {
    { 11, GPIOF_OUT_INIT_LOW, "fpga_addr" }, { 12, GPIOF_OUT_INIT_LOW, "fpga_addr" },
    { 13, GPIOF_OUT_INIT_LOW, "fpga_addr" }, { 14, GPIOF_OUT_INIT_LOW, "fpga_addr" },
    { 15, GPIOF_OUT_INIT_LOW, "fpga_addr" }, { 16, GPIOF_OUT_INIT_LOW, "fpga_addr" },
    { 17, GPIOF_OUT_INIT_LOW, "fpga_addr" }, { 18, GPIOF_OUT_INIT_LOW, "fpga_addr" },
    { 19, GPIOF_OUT_INIT_LOW, "fpga_addr" }, { 20, GPIOF_OUT_INIT_LOW, "fpga_addr" },
    { 21, GPIOF_OUT_INIT_LOW, "fpga_addr" },
};
static struct gpio iom_fpga_data_pins[] = {
    { 2, GPIOF_OUT_INIT_LOW, "fpga_data" }, { 3, GPIOF_OUT_INIT_LOW, "fpga_data" },
    { 4, GPIOF_OUT_INIT_LOW, "fpga_data" }, { 5, GPIOF_OUT_INIT_LOW, "fpga_data" },
    { 6, GPIOF_OUT_INIT_LOW, "fpga_data" }, { 7, GPIOF_OUT_INIT_LOW, "fpga_data" },
    { 8, GPIOF_OUT_INIT_LOW, "fpga_data" }, { 9, GPIOF_OUT_INIT_LOW, "fpga_data" },
};
static struct gpio iom_fpga_control_pins[] = {
    { 22, GPIOF_OUT_INIT_HIGH, "fpga_nwe" }, // nWE
    { 23, GPIOF_OUT_INIT_HIGH, "fpga_noe" }, // nOE
    { 25, GPIOF_OUT_INIT_HIGH, "fpga_ncs" }, // nCS
};

/* GPIO 디스크립터를 저장할 전역 변수 */
static struct gpio_desc *a0_desc;
static struct gpio_desc *address_descs[ARRAY_SIZE(iom_fpga_address_pins)];
static struct gpio_desc *data_descs[ARRAY_SIZE(iom_fpga_data_pins)];
static struct gpio_desc *control_descs[ARRAY_SIZE(iom_fpga_control_pins)];


/**
 * @brief FPGA에 데이터를 씁니다.
 * @param addr 대상 주소
 * @param value 쓸 데이터
 * @return 성공 시 1
 */
ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value)
{
    int i;
    pr_info("FPGA WRITE: address = 0x%x, data = 0x%x \n", addr, value);

    // 주소 버스 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_pins); i++) {
        gpiod_set_value(address_descs[i], (addr >> i) & 0x1);
    }

    // 데이터 버스 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_pins); i++) {
        gpiod_set_value(data_descs[i], (value >> i) & 0x1);
    }

    // 쓰기 신호(nCS, nWE) 제어
    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nWE], 0); udelay(5);
    gpiod_set_value(control_descs[CTRL_nWE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    return 1;
}
EXPORT_SYMBOL(iom_fpga_itf_write);

/**
 * @brief FPGA에서 데이터를 읽습니다.
 * @param addr 대상 주소
 * @return 읽은 데이터
 */
unsigned char iom_fpga_itf_read(unsigned int addr)
{
    unsigned char value = 0;
    int i;

    // 주소 버스 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_pins); i++) {
        gpiod_set_value(address_descs[i], (addr >> i) & 0x1);
    }

    // 데이터 GPIO 핀들을 입력으로 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_pins); i++) {
        gpiod_direction_input(data_descs[i]);
    }

    // 읽기 신호(nCS, nOE) 제어
    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nOE], 0); udelay(1);

    // 데이터 버스에서 값 읽기
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_pins); i++) {
        value |= (gpiod_get_value(data_descs[i]) << i);
    }

    // 제어 신호 비활성화
    gpiod_set_value(control_descs[CTRL_nOE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    // 데이터 GPIO 핀들을 다시 출력으로 설정
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_pins); i++) {
        gpiod_direction_output(data_descs[i], 0);
    }

    pr_info("FPGA READ: address = 0x%x, data = 0x%x \n", addr, value);
    return value;
}
EXPORT_SYMBOL(iom_fpga_itf_read);

/**
 * @brief 모듈 종료 시 호출될 함수. 할당된 모든 GPIO를 해제합니다.
 */
void __exit iom_fpga_itf_exit(void)
{
    pr_info("exit module: %s\n", __func__);
    gpio_free_array(iom_fpga_control_pins, ARRAY_SIZE(iom_fpga_control_pins));
    gpio_free_array(iom_fpga_data_pins, ARRAY_SIZE(iom_fpga_data_pins));
    gpio_free_array(iom_fpga_address_pins, ARRAY_SIZE(iom_fpga_address_pins));
    gpio_free_array(iom_fpga_a0_pin, ARRAY_SIZE(iom_fpga_a0_pin));
}

/**
 * @brief 모듈 초기화 함수. GPIO 배열을 요청하고 디스크립터로 변환합니다.
 * @return 성공 시 0, 실패 시 음수 에러 코드
 */
int __init iom_fpga_itf_init(void)
{
    int i, ret;
    pr_info("init module: %s\n", __func__);

    // GPIO 배열 요청
    ret = gpio_request_array(iom_fpga_a0_pin, ARRAY_SIZE(iom_fpga_a0_pin));
    if (ret) { pr_err("Failed to request A0 GPIO: %d\n", ret); return ret; }

    ret = gpio_request_array(iom_fpga_address_pins, ARRAY_SIZE(iom_fpga_address_pins));
    if (ret) { pr_err("Failed to request address GPIOs: %d\n", ret); goto fail_addr; }

    ret = gpio_request_array(iom_fpga_data_pins, ARRAY_SIZE(iom_fpga_data_pins));
    if (ret) { pr_err("Failed to request data GPIOs: %d\n", ret); goto fail_data; }

    ret = gpio_request_array(iom_fpga_control_pins, ARRAY_SIZE(iom_fpga_control_pins));
    if (ret) { pr_err("Failed to request control GPIOs: %d\n", ret); goto fail_ctrl; }

    // GPIO 번호를 디스크립터로 변환
    a0_desc = gpio_to_desc(iom_fpga_a0_pin[0].gpio);
    for (i = 0; i < ARRAY_SIZE(iom_fpga_address_pins); i++)
        address_descs[i] = gpio_to_desc(iom_fpga_address_pins[i].gpio);
    for (i = 0; i < ARRAY_SIZE(iom_fpga_data_pins); i++)
        data_descs[i] = gpio_to_desc(iom_fpga_data_pins[i].gpio);
    for (i = 0; i < ARRAY_SIZE(iom_fpga_control_pins); i++)
        control_descs[i] = gpio_to_desc(iom_fpga_control_pins[i].gpio);

    pr_info("FPGA interface GPIOs initialized successfully.\n");
    return 0;

fail_ctrl:
    gpio_free_array(iom_fpga_data_pins, ARRAY_SIZE(iom_fpga_data_pins));
fail_data:
    gpio_free_array(iom_fpga_address_pins, ARRAY_SIZE(iom_fpga_address_pins));
fail_addr:
    gpio_free_array(iom_fpga_a0_pin, ARRAY_SIZE(iom_fpga_a0_pin));
    return ret;
}

module_init(iom_fpga_itf_init);
module_exit(iom_fpga_itf_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("FPGA Interface Driver for Kernel 6.x (stable)");


