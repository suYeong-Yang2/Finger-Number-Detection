/*
 * FPGA Interface Driver for modern Linux Kernels (6.x+)
 *
 * v3: Resolved GPIO 10 conflict on Raspberry Pi 4B.
 *
 * Key Changes:
 * - Removed all code related to a0_gpio (GPIO 10). The hardware's default
 * pull-down state is sufficient to keep the A0 line LOW. This avoids
 * the gpiod_get() error (-ENOENT) caused by conflicts with the SPI driver.
 * - This approach directly solves the module loading failure.
 */
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/delay.h>
#include <linux/gpio/consumer.h> // Modern GPIO interface header

/* 제어 신호 인덱스 정의 */
#define CTRL_nWE    0
#define CTRL_nOE    1
#define CTRL_nCS    2

/* 함수 프로토타입 선언 (경고 메시지 해결) */
static int __init iom_fpga_itf_init(void);
static void __exit iom_fpga_itf_exit(void);
ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value);
unsigned char iom_fpga_itf_read(unsigned int addr);

/* GPIO 핀 번호 정의 (A0 핀 제거) */
static const int address_gpios[] = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 };
static const int data_gpios[] = { 2, 3, 4, 5, 6, 7, 8, 9 };
static const int control_gpios[] = { 22, 23, 25 }; // nWE, nOE, nCS 순서

/* GPIO 디스크립터를 저장할 전역 변수 (A0 디스크립터 제거) */
static struct gpio_desc *address_descs[ARRAY_SIZE(address_gpios)] = { NULL };
static struct gpio_desc *data_descs[ARRAY_SIZE(data_gpios)] = { NULL };
static struct gpio_desc *control_descs[ARRAY_SIZE(control_gpios)] = { NULL };

ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value)
{
    int i;
    pr_info("FPGA WRITE: address = 0x%x, data = 0x%x \n", addr, value);

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        gpiod_set_value(address_descs[i], (addr >> i) & 0x1);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_set_value(data_descs[i], (value >> i) & 0x1);
    }

    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nWE], 0); udelay(5);
    gpiod_set_value(control_descs[CTRL_nWE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    return 1;
}
EXPORT_SYMBOL(iom_fpga_itf_write);

unsigned char iom_fpga_itf_read(unsigned int addr)
{
    unsigned char value = 0;
    int i;

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        gpiod_set_value(address_descs[i], (addr >> i) & 0x1);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_direction_input(data_descs[i]);
    }

    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nOE], 0); udelay(1);

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        value |= (gpiod_get_value(data_descs[i]) << i);
    }

    gpiod_set_value(control_descs[CTRL_nOE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_direction_output(data_descs[i], 0);
    }

    pr_info("FPGA READ: address = 0x%x, data = 0x%x \n", addr, value);
    return value;
}
EXPORT_SYMBOL(iom_fpga_itf_read);

static void __exit iom_fpga_itf_exit(void)
{
    int i;
    pr_info("exit module: %s\n", __func__);

    // 할당된 모든 GPIO 디스크립터를 안전하게 해제
    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        if (address_descs[i]) gpiod_put(address_descs[i]);
    }
    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        if (data_descs[i]) gpiod_put(data_descs[i]);
    }
    for (i = 0; i < ARRAY_SIZE(control_gpios); i++) {
        if (control_descs[i]) gpiod_put(control_descs[i]);
    }
}

static int __init iom_fpga_itf_init(void)
{
    int i;
    int ret;
    pr_info("init module: %s\n", __func__);

    // A0 (GPIO 10)에 대한 요청을 완전히 제거

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        address_descs[i] = gpiod_get(NULL, address_gpios[i], GPIOD_OUT_LOW);
        if (IS_ERR(address_descs[i])) {
            ret = PTR_ERR(address_descs[i]);
            pr_err("Failed to get address_gpio %d: %d\n", address_gpios[i], ret);
            goto fail;
        }
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        data_descs[i] = gpiod_get(NULL, data_gpios[i], GPIOD_OUT_LOW);
        if (IS_ERR(data_descs[i])) {
            ret = PTR_ERR(data_descs[i]);
            pr_err("Failed to get data_gpio %d: %d\n", data_gpios[i], ret);
            goto fail;
        }
    }

    for (i = 0; i < ARRAY_SIZE(control_gpios); i++) {
        control_descs[i] = gpiod_get(NULL, control_gpios[i], GPIOD_OUT_HIGH);
        if (IS_ERR(control_descs[i])) {
            ret = PTR_ERR(control_descs[i]);
            pr_err("Failed to get control_gpio %d: %d\n", control_gpios[i], ret);
            goto fail;
        }
    }

    pr_info("FPGA interface GPIOs initialized successfully.\n");
    return 0;

fail:
    // 초기화 실패 시, 지금까지 할당된 모든 리소스를 해제
    iom_fpga_itf_exit();
    return ret;
}

module_init(iom_fpga_itf_init);
module_exit(iom_fpga_itf_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name <your.email@example.com>");
MODULE_DESCRIPTION("FPGA Interface Driver using modern gpiod API (v3 - RPi4 Fix)");
