/*
 * FPGA Interface Driver for modern Linux Kernels (6.x+)
 *
 * v6 (Final): Implemented deferred probe handling for timing issues.
 *
 * Key Changes:
 * - The init function now includes a retry loop to handle -EPROBE_DEFER errors.
 * If a GPIO controller is not yet ready, the module will wait and retry
 * a few times instead of failing immediately.
 * - This robustly solves the -517 error seen during 'insmod'.
 * - Refined the cleanup logic to be fully idempotent, preventing any
 * potential double-free errors on initialization failure.
 */
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/delay.h>
#include <linux/gpio.h>          // For gpio_request_one(), gpio_free()
#include <linux/gpio/consumer.h> // For gpiod_* functions and descriptors
#include <linux/errno.h>         // For EPROBE_DEFER

/* 제어 신호 인덱스 정의 */
#define CTRL_nWE    0
#define CTRL_nOE    1
#define CTRL_nCS    2

/* 함수 프로토타입 선언 */
static int __init iom_fpga_itf_init(void);
static void __exit iom_fpga_itf_exit(void);
ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value);
unsigned char iom_fpga_itf_read(unsigned int addr);
static void iom_fpga_itf_cleanup_gpios(void);

/* GPIO 핀 번호 정의 */
static const int address_gpios[] = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 };
static const int data_gpios[] = { 2, 3, 4, 5, 6, 7, 8, 9 };
static const int control_gpios[] = { 22, 23, 25 }; // nWE, nOE, nCS 순서

/* GPIO 디스크립터 저장 변수 */
static struct gpio_desc *address_descs[ARRAY_SIZE(address_gpios)] = { NULL };
static struct gpio_desc *data_descs[ARRAY_SIZE(data_gpios)] = { NULL };
static struct gpio_desc *control_descs[ARRAY_SIZE(control_gpios)] = { NULL };

ssize_t iom_fpga_itf_write(unsigned int addr, unsigned char value)
{
    int i;
    pr_info("FPGA WRITE: address = 0x%x, data = 0x%x \n", addr, value);

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        gpiod_set_value(address_descs[i], (addr >> (i + 1)) & 0x1);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_set_value(data_descs[i], (value >> i) & 0x1);
    }

    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nWE], 0); udelay(5);
    gpiod_set_value(control_descs[CTRL_nWE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    return 1;
}
EXPORT_SYMBOL(iom_fpga_itf_write);

unsigned char iom_fpga_itf_read(unsigned int addr)
{
    unsigned char value = 0;
    int i;

    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        gpiod_set_value(address_descs[i], (addr >> (i + 1)) & 0x1);
    }

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_direction_input(data_descs[i]);
    }

    gpiod_set_value(control_descs[CTRL_nCS], 0); udelay(1);
    gpiod_set_value(control_descs[CTRL_nOE], 0); udelay(1);

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        value |= (gpiod_get_value(data_descs[i]) << i);
    }

    gpiod_set_value(control_descs[CTRL_nOE], 1);
    gpiod_set_value(control_descs[CTRL_nCS], 1);

    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        gpiod_direction_output(data_descs[i], 0);
    }

    pr_info("FPGA READ: address = 0x%x, data = 0x%x \n", addr, value);
    return value;
}
EXPORT_SYMBOL(iom_fpga_itf_read);

static void iom_fpga_itf_cleanup_gpios(void)
{
    int i;
    pr_info("Cleaning up GPIOs...\n");
    
    // 요청된 GPIO들을 역순으로 안전하게 해제합니다.
    for (i = ARRAY_SIZE(control_gpios) - 1; i >= 0; i--) {
        if (control_descs[i]) {
            gpio_free(control_gpios[i]);
            control_descs[i] = NULL;
        }
    }
    for (i = ARRAY_SIZE(data_gpios) - 1; i >= 0; i--) {
        if (data_descs[i]) {
            gpio_free(data_gpios[i]);
            data_descs[i] = NULL;
        }
    }
    for (i = ARRAY_SIZE(address_gpios) - 1; i >= 0; i--) {
        if (address_descs[i]) {
            gpio_free(address_gpios[i]);
            address_descs[i] = NULL;
        }
    }
}

static void __exit iom_fpga_itf_exit(void)
{
    pr_info("exit module: %s\n", __func__);
    iom_fpga_itf_cleanup_gpios();
}

static int __init iom_fpga_itf_init(void)
{
    int i;
    int ret = 0;
    int retries = 5; // 최대 5번 재시도
    const int retry_delay_ms = 200; // 재시도 간격 200ms

    pr_info("init module: %s\n", __func__);

try_again:
    // 주소 GPIO 요청
    for (i = 0; i < ARRAY_SIZE(address_gpios); i++) {
        ret = gpio_request_one(address_gpios[i], GPIOF_OUT_INIT_LOW, "fpga_addr");
        if (ret) {
            pr_err("Failed to request address_gpio %d: %d\n", address_gpios[i], ret);
            goto fail;
        }
        address_descs[i] = gpio_to_desc(address_gpios[i]);
    }

    // 데이터 GPIO 요청
    for (i = 0; i < ARRAY_SIZE(data_gpios); i++) {
        ret = gpio_request_one(data_gpios[i], GPIOF_OUT_INIT_LOW, "fpga_data");
        if (ret) {
            pr_err("Failed to request data_gpio %d: %d\n", data_gpios[i], ret);
            goto fail;
        }
        data_descs[i] = gpio_to_desc(data_gpios[i]);
    }

    // 제어 GPIO 요청
    for (i = 0; i < ARRAY_SIZE(control_gpios); i++) {
        ret = gpio_request_one(control_gpios[i], GPIOF_OUT_INIT_HIGH, "fpga_ctrl");
        if (ret) {
            pr_err("Failed to request control_gpio %d: %d\n", control_gpios[i], ret);
            goto fail;
        }
        control_descs[i] = gpio_to_desc(control_gpios[i]);
    }

    pr_info("FPGA interface GPIOs initialized successfully.\n");
    return 0; // 성공!

fail:
    // 실패 시, 지금까지 요청된 모든 리소스를 정리합니다.
    iom_fpga_itf_cleanup_gpios();

    // 만약 오류가 EPROBE_DEFER이고 재시도 횟수가 남았다면,
    if (ret == -EPROBE_DEFER && --retries > 0) {
        pr_warn("A GPIO controller is not ready, will retry in %dms... (%d retries left)\n",
                retry_delay_ms, retries);
        msleep(retry_delay_ms); // 잠시 대기
        goto try_again; // 처음부터 다시 시도
    }

    pr_err("Initialization failed with error %d. Aborting.\n", ret);
    return ret; // 최종 실패
}

module_init(iom_fpga_itf_init);
module_exit(iom_fpga_itf_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("FPGA Interface Driver (v6 - Deferred Probe Final)");

